import tkinter as tk
from tkinter import messagebox
import json
import os


CONTACTS_FILE = "contacts.json"

def load_contacts():
    contacts = {}
    if os.path.exists(CONTACTS_FILE):
        try:
            with open(CONTACTS_FILE, "r") as file:
                contacts = json.load(file)
        except:
            pass
    return contacts

def save_contacts(contacts):
    with open(CONTACTS_FILE, "w") as file:
        json.dump(contacts, file, indent=4)

def clear_entries():
    name_entry.delete(0, tk.END)
    phone_entry.delete(0, tk.END)
    email_entry.delete(0, tk.END)
    address_entry.delete(0, tk.END)

def refresh_list():
    contact_list.delete(0, tk.END)
    for name, info in contacts.items():
        contact_list.insert(tk.END, f"{name} | {info['Phone']} | {info.get('Email','')} | {info.get('Address','')}")

def on_select(event):
    if contact_list.curselection():
        selected = contact_list.get(contact_list.curselection())
        name = selected.split(" | ")[0]
        if name in contacts:
            clear_entries()
            name_entry.insert(0, name)
            phone_entry.insert(0, contacts[name]["Phone"])
            email_entry.insert(0, contacts[name].get("Email",""))
            address_entry.insert(0, contacts[name].get("Address",""))

def add_contact():
    name = name_entry.get().strip()
    phone = phone_entry.get().strip()
    email = email_entry.get().strip()
    address = address_entry.get().strip()

    if not name or not phone:
        messagebox.showerror("Error", "Name and Phone are required")
        return
        
    if not phone.isdigit():
        messagebox.showerror("Error", "Phone must be numbers only")
        return
        
    contacts[name] = {
        "Phone": phone,
        "Email": email,
        "Address": address
    }
    save_contacts(contacts)
    clear_entries()
    refresh_list()
    messagebox.showinfo("Success", "Contact added successfully")

def update_contact():
    name = name_entry.get().strip()
    if not name in contacts:
        messagebox.showerror("Error", "Contact not found")
        return
        
    phone = phone_entry.get().strip()
    if phone and not phone.isdigit():
        messagebox.showerror("Error", "Phone must be numbers only")
        return
        
    contacts[name] = {
        "Phone": phone,
        "Email": email_entry.get().strip(),
        "Address": address_entry.get().strip()}
    save_contacts(contacts)
    clear_entries()
    refresh_list()
    messagebox.showinfo("Success", "Contact updated successfully")

def delete_contact():
    name = name_entry.get().strip()
    if name in contacts:
        del contacts[name]
        save_contacts(contacts)
        clear_entries()
        refresh_list()
        messagebox.showinfo("Success", "Contact deleted successfully")
    else:
        messagebox.showerror("Error", "Contact not found")

def search_contact():
    search_term = search_entry.get().strip().lower()
    contact_list.delete(0, tk.END)
    for name, info in contacts.items():
        if (search_term in name.lower() or 
            search_term in info["Phone"] or 
            search_term in info.get("Email","").lower() or 
            search_term in info.get("Address","").lower()):
            contact_list.insert(tk.END, f"{name} | {info['Phone']} | {info.get('Email','')} | {info.get('Address','')}")

def view_all():
    refresh_list()

root = tk.Tk()
root.title("Contact Book")

contacts = load_contacts()

tk.Label(root, text="Name").grid(row=0, column=0, sticky="w", padx=5, pady=5)
tk.Label(root, text="Phone").grid(row=1, column=0, sticky="w", padx=5, pady=5)
tk.Label(root, text="Email").grid(row=2, column=0, sticky="w", padx=5, pady=5)
tk.Label(root, text="Address").grid(row=3, column=0, sticky="w", padx=5, pady=5)
tk.Label(root, text="Search").grid(row=4, column=0, sticky="w", padx=5, pady=5)

name_entry = tk.Entry(root, width=30)
phone_entry = tk.Entry(root, width=30)
email_entry = tk.Entry(root, width=30)
address_entry = tk.Entry(root, width=30)
search_entry = tk.Entry(root, width=30)

name_entry.grid(row=0, column=1, padx=5, pady=5)
phone_entry.grid(row=1, column=1, padx=5, pady=5)
email_entry.grid(row=2, column=1, padx=5, pady=5)
address_entry.grid(row=3, column=1, padx=5, pady=5)
search_entry.grid(row=4, column=1, padx=5, pady=5)

tk.Button(root, text="Add", width=10, command=add_contact).grid(row=0, column=2, padx=5, pady=5)
tk.Button(root, text="Update", width=10, command=update_contact).grid(row=1, column=2, padx=5, pady=5)
tk.Button(root, text="Delete", width=10, command=delete_contact).grid(row=2, column=2, padx=5, pady=5)
tk.Button(root, text="View All", width=10, command=view_all).grid(row=3, column=2, padx=5, pady=5)
tk.Button(root, text="Search", width=10, command=search_contact).grid(row=4, column=2, padx=5, pady=5)

contact_list = tk.Listbox(root, width=70, height=12)
scrollbar = tk.Scrollbar(root)

contact_list.grid(row=5, column=0, columnspan=3, padx=5, pady=10, sticky="nsew")
scrollbar.grid(row=5, column=3, sticky="ns")

contact_list.config(yscrollcommand=scrollbar.set)
scrollbar.config(command=contact_list.yview)
contact_list.bind("<<ListboxSelect>>", on_select)

root.grid_rowconfigure(5, weight=1)
root.grid_columnconfigure(1, weight=1)

refresh_list()

root.mainloop()
